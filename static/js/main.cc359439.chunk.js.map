{"version":3,"sources":["reducer/reducer.js","components/GhibliCards.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","ghibliChars","error","isFetching","CardHolder","styled","div","Card","FetchButton","button","CharCard","props","src","item","name","alt","gender","age","hair_color","eye_color","GhibliCards","style","minHeight","this","length","color","map","key","id","onClick","getGhibli","React","Component","connect","state","dispatch","type","axios","get","then","res","console","log","data","reducedArray","filter","index","payload","catch","err","message","App","className","width","display","justifyContent","alignItems","backgroundColor","maxWidth","padding","role","aria-label","Boolean","window","location","hostname","match","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAEMA,EAAe,CACjBC,YAAa,GACbC,MAAO,GACPC,YAAY,G,ywCCAhB,IAAMC,EAAaC,IAAOC,IAAV,KAaVC,EAAOF,IAAOC,IAAV,KAwBJE,EAAcH,IAAOI,OAAV,KAcXC,EAAW,SAACC,GACd,OACI,kBAACJ,EAAD,KACI,yBAAKK,IACmB,aAApBD,EAAME,KAAKC,KAAsB,sIACb,QAApBH,EAAME,KAAKC,KAAiB,4GACR,WAApBH,EAAME,KAAKC,KAAoB,2IACX,SAApBH,EAAME,KAAKC,KAAkB,yIACT,YAApBH,EAAME,KAAKC,KAAqB,iEACZ,UAApBH,EAAME,KAAKC,KAAmB,6EACV,aAApBH,EAAME,KAAKC,KAAsB,6IACb,UAApBH,EAAME,KAAKC,KAAmB,gEACV,eAApBH,EAAME,KAAKC,MACS,SAApBH,EAAME,KAAKC,KADwB,+EAEf,SAApBH,EAAME,KAAKC,KAAkB,+EACT,qBAApBH,EAAME,KAAKC,KAA8B,yHACrB,iBAApBH,EAAME,KAAKC,KAA0B,0GACjB,oBAApBH,EAAME,KAAKC,KAA6B,+EACpB,oBAApBH,EAAME,KAAKC,KAA6B,sHACpB,WAApBH,EAAME,KAAKC,KAAoB,mHACX,gBAApBH,EAAME,KAAKC,KAAyB,0IAChB,WAApBH,EAAME,KAAKC,KAAoB,qIACX,eAApBH,EAAME,KAAKC,KAAwB,+EACf,iBAApBH,EAAME,KAAKC,KAA0B,0DAA4D,GAEjGC,IAAI,qBAER,4BAAKJ,EAAME,KAAKC,MAChB,4BAAI,0CAAsBH,EAAME,KAAKG,QACrC,4BAAI,uCAAmBL,EAAME,KAAKI,KAClC,4BAAI,8CAA0BN,EAAME,KAAKK,YACzC,4BAAI,6CAAyBP,EAAME,KAAKM,aAK9CC,E,uKAGE,OACI,yBAAKC,MAAO,CAACC,UAAW,UACnBC,KAAKZ,MAAMV,YAAYuB,OAAS,EAC7B,kBAACpB,EAAD,KACKmB,KAAKZ,MAAMT,MAAMsB,OAAS,EAAI,wBAAIH,MAAO,CAACI,MAAO,QAASF,KAAKZ,MAAMT,OAClEqB,KAAKZ,MAAMV,YAAYyB,KAAI,SAAAb,GACvB,OAAO,kBAAC,EAAD,CAAUc,IAAKd,EAAKe,GAAIf,KAAMA,QAIjD,kBAACL,EAAD,CAAaqB,QAASN,KAAKZ,MAAMmB,WAAjC,iC,GAbMC,IAAMC,WA4BjBC,eARS,SAAAC,GACpB,MAAO,CACH/B,WAAY+B,EAAM/B,WAClBF,YAAaiC,EAAMjC,YACnBC,MAAOgC,EAAMhC,SAMjB,CAAE4B,UCpHmB,kBAAM,SAAAK,GAC3BA,EAAS,CAAEC,KALsB,0BAOjCC,IAAMC,IAAI,0CACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,IAAMC,EAAeJ,EAAIG,KAAKE,QAAO,SAAChC,EAAMiC,GACxC,GAAGA,EAAQ,GACP,OAAOjC,KAGf4B,QAAQC,IAAIE,GACZT,EAAS,CAAEC,KAfgB,0BAeeW,QAASH,OAEtDI,OAAM,SAAAC,GACHR,QAAQC,IAAIO,EAAIC,SAChBf,EAAS,CAAEC,KAlBc,wBAkBeW,QAASE,EAAIC,gBDkGlDjB,CAGbb,G,ME5Ga+B,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAK/B,MAAO,CAACgC,MAAO,OAAQC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WACjF,wBAAInC,MAAO,CAACoC,gBAAiB,0BAA2BC,SAAU,QAASC,QAAS,aAApF,yBAAuH,0BAAMC,KAAK,MAAMC,aAAW,WAA5B,kBAEzH,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,aLFS,WAAmC,IAAlClC,EAAiC,uDAAzBlC,EAAcqE,EAAW,uCACrD,OAAOA,EAAOjC,MACV,IER6B,wBFSzB,OAAO,2BACAF,GADP,IAEI/B,YAAY,EACZD,MAAO,KAEf,IEb+B,0BFc3B,OAAO,2BACAgC,GADP,IAEIjC,YAAaoE,EAAOtB,QACpB5C,YAAY,IAEpB,IElB6B,wBFmBzB,OAAO,2BACA+B,GADP,IAEI/B,YAAY,EACZD,MAAO,uBAAyBmE,EAAOtB,UAE/C,QACI,OAAOb,KKnBgBoC,YAAgBC,MAEnDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdhC,OAAM,SAAA9C,GACLuC,QAAQvC,MAAMA,EAAMgD,c","file":"static/js/main.cc359439.chunk.js","sourcesContent":["import { FETCHING_GHIBLI_START, FETCHING_GHIBLI_SUCCESS, FETCHING_GHIBLI_ERROR } from '../actions'\r\n\r\nconst initialState = {\r\n    ghibliChars: [],\r\n    error: '',\r\n    isFetching: false\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FETCHING_GHIBLI_START:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: ''\r\n            }\r\n        case FETCHING_GHIBLI_SUCCESS: \r\n            return {\r\n                ...state,\r\n                ghibliChars: action.payload,\r\n                isFetching: false\r\n            }\r\n        case FETCHING_GHIBLI_ERROR:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: 'there was an error: ' + action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport { getGhibli } from '../actions/index'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst CardHolder = styled.div`\r\n    width: 100%;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding-bottom: 50px;\r\n    border: 1px dashed #a1afc0;\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n`;\r\n\r\nconst Card = styled.div`\r\n    width: 300px;\r\n    color: #594679;\r\n    font-weight: 650;\r\n    margin: 50px 50px 0 50px;  \r\n    background-color: rgba(171, 230, 244, .5);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;    \r\n    img {\r\n        width: 280px;\r\n        min-height: 280px;\r\n        max-height: 280px;\r\n        padding-top: 10px;\r\n        margin: 0 auto;\r\n        object-fit: contain;\r\n        overflow: auto;\r\n    }    \r\n    span {\r\n        font-size: 20px;\r\n        color: #244B6F;\r\n    }\r\n`;\r\n\r\nconst FetchButton = styled.button`\r\n    height: 40px;\r\n    font-size: 16px;\r\n    color: white;\r\n    margin-bottom: 50px;\r\n    background-color: #0C2F44;\r\n    border-color: #0C2F44;\r\n    border-radius: 8px;\r\n    outline: none;\r\n    &:hover {\r\n        background-color: #72A8D6;\r\n    }\r\n`;\r\n\r\nconst CharCard = (props) => {\r\n    return (\r\n        <Card>\r\n            <img src={\r\n                props.item.name === 'Ashitaka' ? 'https://vignette.wikia.nocookie.net/disney/images/4/49/Ashitaka.jpg/revision/latest/top-crop/width/360/height/450?cb=20140421213740' :\r\n                props.item.name === 'San' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/2/22/San-0.jpg/revision/latest?cb=20200620033852' :\r\n                props.item.name === 'Eboshi' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/9/9f/Eboshi.png/revision/latest/top-crop/width/360/height/450?cb=20181025001610' :\r\n                props.item.name === 'Jigo' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/7/72/Jigo.jpg/revision/latest/top-crop/width/220/height/220?cb=20181011142443' :\r\n                props.item.name === 'Kohroku' ? 'https://www.anime-planet.com/images/characters/koroku-2705.jpg' :\r\n                props.item.name === 'Gonza' ? 'https://www.anime-planet.com/images/characters/gonza-2704.jpg?t=1548420639' :\r\n                props.item.name === 'Hii-sama' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/8/83/Hii-sama.jpg/revision/latest/top-crop/width/360/height/450?cb=20181011141901' :\r\n                props.item.name === 'Yakul' ? 'https://www.anime-planet.com/images/characters/yakul-2702.jpg' :\r\n                props.item.name === 'Shishigami' ? 'https://i.pinimg.com/originals/fe/cd/3d/fecd3dfbdbe1689e437321232c24c970.jpg' :\r\n                props.item.name === 'Moro' ? 'https://i.pinimg.com/originals/fe/cd/3d/fecd3dfbdbe1689e437321232c24c970.jpg' :\r\n                props.item.name === 'Jiji' ? 'https://i.pinimg.com/originals/aa/98/f7/aa98f7cbdf68c550dc364c42fb0b7d3d.png' :\r\n                props.item.name === 'Satsuki Kusakabe' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/e/eb/Satsuki%27s_outfit.png/revision/latest?cb=20160401030008' :\r\n                props.item.name === 'Mei Kusakabe' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/6/6f/Mei.png/revision/latest?cb=20180815032007' :\r\n                props.item.name === 'Tatsuo Kusakabe' ? 'https://i.pinimg.com/originals/17/12/6c/17126c835fdd614f948961d5597f9e13.jpg' :\r\n                props.item.name === 'Yasuko Kusakabe' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/7/7b/Yasuko_Kusakabe.png/revision/latest?cb=20110705210532' :\r\n                props.item.name === 'Granny' ? 'https://userscontent2.emaze.com/images/ee5e3eb5-b7ea-486e-9785-a680e729d4eb/633f7f504e2088b100862a854f739062.jpg' :\r\n                props.item.name === 'Kanta Ogaki' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/c/c3/Kanta.jpg/revision/latest/top-crop/width/360/height/450?cb=20181028000058' :\r\n                props.item.name === 'Totoro' ? 'https://vignette.wikia.nocookie.net/studio-ghibli/images/1/1f/Totoro.gif/revision/latest/scale-to-width-down/340?cb=20181023134744' :\r\n                props.item.name === 'Chu Totoro' ? 'https://i.pinimg.com/originals/bb/dc/a6/bbdca6d61bd40e96cbf7a682bf49ef4f.jpg' :\r\n                props.item.name === 'Chibi Totoro' ? 'https://pixeljoint.com/files/icons/full/chibitotoro.png' : ''\r\n            } \r\n                alt='Ghibli character'\r\n            />\r\n            <h1>{props.item.name}</h1>\r\n            <h3><span>gender: </span>{props.item.gender}</h3>\r\n            <h3><span>age: </span>{props.item.age}</h3>\r\n            <h3><span>hair color: </span>{props.item.hair_color}</h3>\r\n            <h3><span>eye color: </span>{props.item.eye_color}</h3>\r\n        </Card>\r\n    )\r\n}\r\n\r\nclass GhibliCards extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{minHeight: '100vh'}}>\r\n                {this.props.ghibliChars.length > 0 ?\r\n                    <CardHolder>\r\n                        {this.props.error.length > 0 ? <h2 style={{color: 'red'}}>{this.props.error}</h2> : \r\n                            this.props.ghibliChars.map(item => {\r\n                                return <CharCard key={item.id} item={item} />\r\n                            })\r\n                        }\r\n                    </CardHolder> :\r\n                    <FetchButton onClick={this.props.getGhibli}>Fetch Ghibli Characters!</FetchButton>\r\n                }                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isFetching: state.isFetching,\r\n        ghibliChars: state.ghibliChars,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getGhibli }\r\n)(GhibliCards)","import axios from 'axios'\r\n\r\nexport const FETCHING_GHIBLI_START = 'FETCHING_GHIBLI_START';\r\nexport const FETCHING_GHIBLI_SUCCESS = 'FETCHING_GHIBLI_SUCCESS';\r\nexport const FETCHING_GHIBLI_ERROR = 'FETCHING_GHIBLI_ERROR';\r\n\r\nexport const getGhibli = () => dispatch => {\r\n    dispatch({ type: FETCHING_GHIBLI_START });\r\n\r\n    axios.get('https://ghibliapi.herokuapp.com/people')\r\n        .then(res => {\r\n            console.log(res.data)\r\n            const reducedArray = res.data.filter((item, index) => {\r\n                if(index < 20){\r\n                    return item\r\n                }          \r\n            })\r\n            console.log(reducedArray)\r\n            dispatch({ type: FETCHING_GHIBLI_SUCCESS, payload: reducedArray })\r\n        })\r\n        .catch(err => {\r\n            console.log(err.message)\r\n            dispatch({ type: FETCHING_GHIBLI_ERROR, payload: err.message })\r\n        })\r\n};","import React from 'react';\nimport GhibliCards from './components/GhibliCards'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n        <h1 style={{backgroundColor: 'rgba(171, 230, 244, .5)', maxWidth: '450px', padding: '5px 15px'}}>Ghibli Characters App <span role='img' aria-label='unicorn'>🦄</span></h1>\n      </div>\n      <GhibliCards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducer/reducer'\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}